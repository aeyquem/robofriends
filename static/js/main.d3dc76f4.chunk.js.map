{"version":3,"sources":["reducers.js","serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","isPending","robots","error","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","Card","name","email","id","className","alt","src","CardList","map","user","i","key","SearchBox","searchChange","aria-label","type","placeholder","onChange","Scroll","style","overflowY","height","this","props","children","Component","ErrorBoundary","hasError","info","setState","App","onRequestRobots","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","response","json","data","heavyArray","Array","fill","index","heavyDuty","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d3dc76f4.chunk.js","sourcesContent":["import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants'\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, { searchField: action.payload })\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true });\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false });\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload });\r\n        default:\r\n            return state;\r\n    }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\n\r\nconst Card = ({ name, email, id }) => {\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='id' src={`https://robohash.org/${id}?size=200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((user, i) => {\r\n                    return (\r\n                        <Card\r\n                            id={robots[i].id}\r\n                            key={i}\r\n                            name={robots[i].name}\r\n                            email={robots[i].email}\r\n                        />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n\r\n    return (\r\n        <div className='tc'>\r\n            <input aria-label=\"Search robots\" className='pa3 ba b--green bg-ligthest-blue' type='search' placeholder='search robots' onChange={searchChange}></input>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default SearchBox;","import React, { Component } from 'react';\r\n\r\nclass Scroll extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div style={{ overflowY: 'scroll', height: '500px' }}>\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return (\r\n                <h1>Oopps. That is not good</h1>\r\n            );\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component, Fragment } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary'\r\n\r\nimport { setSearchField, requestRobots } from '../actions'\r\nimport { connect } from 'react-redux'\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        isPending: state.requestRobots.isPending,\r\n        robots: state.requestRobots.robots,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render() {\r\n        const { searchField, onSearchChange, robots, isPending } = this.props;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        });\r\n\r\n        if (isPending) {\r\n            return <h1>Loading...</h1>\r\n        }\r\n        else {\r\n            return (\r\n                <Fragment>\r\n                    <h1 className=\"tc f2\">RoboFriends</h1>\r\n                    <SearchBox searchChange={onSearchChange}></SearchBox>\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <CardList robots={filteredRobots} />\r\n                        </ErrorBoundary>\r\n                    </Scroll>\r\n                </Fragment>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n\r\n\r\nconst heavyDuty = () => {\r\n    const heavyArray = new Array(7000).fill(':D');\r\n    console.log('Created!');\r\n    return function (index) {\r\n        return heavyArray[index];\r\n    }\r\n}\r\n\r\nheavyDuty()(3);","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants'\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { searchRobots, requestRobots } from './reducers';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport App from './containers/App';\r\nimport { Provider } from 'react-redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\r\n\r\nReactDOM.render(\r\n    <Provider store={store} >\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}